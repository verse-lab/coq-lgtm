# Artefact for LGTM

## Building Instructions

The version of Coq used in our development is **8.16.1**, where the version of underlying OCaml compiler is **4.12.0**. We list the required packages along with their respective versions (printed by `opam list`) as follows. 

```
coq-cfml               20220112
coq-cfml-basis         20220112
coq-cfml-stdlib        20220112
coq-fcsl-pcm           1.7.0
coq-mathcomp-algebra   1.15.0
coq-mathcomp-fingroup  1.15.0
coq-mathcomp-finmap    1.5.2
coq-mathcomp-ssreflect 1.15.0
coq-mathcomp-zify      1.3.0+1.12+8.13
coq-tlc                20211215
```

### Prerequisites

We recommend installing Coq and the required packages via OPAM. [The official page of OPAM](https://opam.ocaml.org/doc/Install.html) describes how to install and configure OPAM, and [the official page of Coq](https://coq.inria.fr/opam-using.html) describes how to install Coq and Coq packages with OPAM. 

### Build the Coq Project

Execute the following command in the terminal: 

```
make
```

Please note that warnings (in yellow colour) may appear during the compilation, but they will not cause the compilation to fail. 
## Navigation Guide

### Appendix

Appendix is attached in `appendix.pdf`.

### Important Proof Rules

Structural rules:
- Focus: `wp_union` in `lib/seplog/LibWP.v`
- Product: `htriple_union_pointwise` in `lib/seplog/LibWP.v`
- Conseq: `htriple_conseq` in `lib/seplog/LibWP.v`
- Frame: `htriple_frame` in `lib/seplog/LibWP.v`

Lockstep rules: 
- Ret: `htriple_val` in `lib/seplog/LibWP.v`
- Read: `htriple_get` in `lib/seplog/LibWP.v`
- Asn: `htriple_set` in `lib/seplog/LibWP.v`
- Fr: `htriple_free` in `lib/seplog/LibWP.v`
- Alc: `htriple_ref` in `lib/seplog/LibWP.v`
- MAlc: `htriple_alloc` in `lib/seplog/LibWP.v`
- MFr: `htriple_dealloc` in `lib/seplog/LibWP.v`
- Let: `htriple_let` in `lib/seplog/LibWP.v`
- If: `htriple_if` in `lib/seplog/LibWP.v`
- Len: `htriple_array_length` in `lib/seplog/LibArray.v`
- AsnArr: `htriple_array_set` in `lib/seplog/LibArray.v`
- ReadArr: `htriple_array_get` in `lib/seplog/LibArray.v`

Domain substitution rule: 
- Subst: `htriple_hsub` in `lib/seplog/LibWP.v`

Rule for for-loops: 
- For: `wp_for` in `lib/seplog/LibWP.v`

Rule for while-loops: 
- While: `xwhile_lemma` in `lib/seplog/LibLoops.v`

### Important Results

The mechanisation of the overview example from the paper can be found in `experiments` folder. 

Evaluation Case Studies: 
- #1:  `sum_spec` in `experiments/SV.v`
- #2:  `dotprod_spec` in `experiments/SV.v`
- #3:  `sv_dotprod_spec` in `experiments/SV.v`
- #4:  `sum_spec` in `experiments/COO.v`
- #5:  `sum_spec` in `experiments/CSR.v`
- #6:  `spmv_spec` in `experiments/CSR.v`
- #7:  `spmspv_spec` in `experiments/CSR.v`
- #8:  `sum_spec` in `experiments/uCSR.v`
- #9:  `spmv_spec` in `experiments/uCSR.v`
- #10: `spmspv_spec` in `experiments/uCSR.v`
- #11: `rlsum_spec` in `experiments/RL.v`
- #12: `alpha_blend_spec` in `experiments/RL.v`
- #13: `spmv_spec` in `experiments/CSR_float_mono.v`

The mechanised proof of the overview case study, presented in Section 4, is located in `experiments/uCSR.v` with all correspondent comments.
